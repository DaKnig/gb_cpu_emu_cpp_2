* A fast SM83 emulator (name pending^TM)!

** goal

making a very fast sm83 emulator. the sm83 is (supposedly) the cpu core in the
game-boy. this is not a full gb emulator- it does not, and would not, emulate
peripherals such as screen, mmio, the cartridge - only the cpu as if it was
connected to a bus with 64kiB of RAM.

the emulator can load code from files, run single instruction, run a custom
debugger and maybe other things too, later.

** level of completeness

passes the blargg cpu_instrs individual tests- but not the big 64kB test rom as
that would require emulating MBC, which is outside of the scope of this project.
*doesn't* pass the interrupt test as interrupts are out of scope.

a test binary would be generated under bin/test_blargg which would report if the
tests pass and show the bg layer if they fail. this is enough for debugging and
quite fast.

a full debugger exists, with customizable prompt and colorful text. to see the
documentation of the debugger instructions, type `help` in the debugger prompt.
main features include: custom prompt with a printf-like format string, 
breakpoints, disassembling a single instruction at any point in memory.


** compilation

#+BEGIN_SRC bash
  make
#+END_SRC

** usage

#+BEGIN_SRC bash
  ./main memory_snapshot
#+END_SRC

most gb roms should load fine as if they were loaded onto a 32kiB RAM cartridge.
if more than 32kiB are present, all bytes up to 64kiB would be loaded into
$8000-$ffff in the memory space.

** design considerations

1. the traditional interpreter-based emulator model was chosen instead of a JIT
based emulator as the expected workload is small chunks of code and compilation
overhead might be too big.

2. the Big Switch approach was chosen over any logic-based instruction decoding
to increase performance, even if by a little. should investigate the performance
cost incurred by more icache pressure.

3. for disassembly, a python script with a (modified) json file from 
https://gbdev.io/gb-opcodes//optables/classic were used- even if inefficient,
the approach is simple and probably more correct and for now that is more
important than the runtime speed of the debugger.
